@import 'palette';

// для оттенка цвета возвращет соотвествующий контраст
@function contrast($palette, $hue) {
  @return map-get(map-get($palette, contrast), $hue);
}

// генерирует палитру для темы. 
@function palette($base-palette, $default: 500, $text: $default) {
 // @debug map-get($base-palette, $text);
  $result: map_merge($base-palette, (
    default: map-get($base-palette, $default),
    text: map-get($base-palette, $text),
    default-contrast: contrast($base-palette, $default),
  ));

  // Для каждого оттенка добавляет контрастный цвет.
 
  @debug $result;
  @return $result;
}

// генерирует темы приложения
@function theme ($primary, $accent, $warn: palette($mat-red)) {
  $result: (
    primary: $primary,
    accent: $accent,
    warn: $warn,
    foreground: $theme-foreground,
    background: $theme-background,
  );
  @return $result;
}

/*
 Функция которая получает из палитры нужный оттенок цвета с уровнем прозрачности
*/
@function get-color($palette, $hue: default, $opacity: null) {
  $color: map-get($palette, $hue);

  @if (type-of($color) != color) {
    @return $color;
  }

  @return rgba($color, if($opacity == null, opacity($color), $opacity));
}
